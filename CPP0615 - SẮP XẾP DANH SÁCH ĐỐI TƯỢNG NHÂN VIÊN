#include <iostream>
#include <algorithm>
#include <string>
using namespace std;

#define ll long long
#define P 100000007

class NhanVien {
private:
    string msv, hvt, gender, birth, dc, sdt, ngayDk;
    static int cnt;

public:
    friend istream& operator>> (istream&, NhanVien&);
    friend ostream& operator<< (ostream&, const NhanVien&);
    string GetBirth() const ; 
};
int NhanVien::cnt = 0;


string NhanVien::GetBirth() const{
    return birth;
}

istream& operator>> (istream& in, NhanVien &a) {
    a.cnt++;
    a.msv = string(5 - to_string(a.cnt).length(), '0') + to_string(a.cnt);
    getline(in >> ws, a.hvt);
    in >> a.gender >> a.birth;
    getline(in >> ws, a.dc);
    in >> a.sdt >> a.ngayDk;
    return in;
}

bool compare(const NhanVien& a, const NhanVien& b) {
    string year_a = a.GetBirth().substr(6, 4), year_b = b.GetBirth().substr(6, 4);
    string month_a = a.GetBirth().substr(0, 2), month_b = b.GetBirth().substr(0, 2);
    string day_a = a.GetBirth().substr(3, 2), day_b = b.GetBirth().substr(3, 2);

    if (year_a != year_b) return year_a < year_b;
    if (month_a != month_b) return month_a < month_b;
    return day_a < day_b;
}

void sapxep(NhanVien a[], int n) {
    sort(a, a + n, compare);
}


ostream& operator<< (ostream& out, const NhanVien& a) {
    out << a.msv << " " << a.hvt << " " << a.gender << " " << a.birth << " " << a.dc << " ";
    out << a.sdt << " " << a.ngayDk << endl;
    return out;
}

int main(){
    NhanVien ds[50];
    int N,i;
    cin >> N;
    for(i=0;i<N;i++) cin >> ds[i];
    sapxep(ds, N);
    for(i=0;i<N;i++) cout << ds[i];
    return 0;
}
